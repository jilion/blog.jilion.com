---
title: "Jilion &amp; Open-Source: Supporting Guard"
title_html:  "<span>Jilion &amp; Open-Source:</span> <span>Supporting Guard</span>"
authors: Thibaud
layout: post
tags:
- Open-Source
---
At Jilion we use open-source projects for almost everything we do; "Git":http://git-scm.com/, "Rails":http://rubyonrails.org/, "PostgreSQL":http://www.postgresql.org/, "MongoDB":http://www.mongodb.org/, "Backbone.js":http://documentcloud.github.com/backbone/ - you name it!

We support open-source software and like to give back to the community by reporting issues we encounter with tools we use and collaborating on their development. The team also love to create open-source projects in their spare time.

h4. Guard

<a href="https://github.com/guard/guard"><img src="http://blog.jilion.com.s3.amazonaws.com/uploads/2012/05/guard-icon.png" alt="Guard" style="float:left;margin:-16px 24px 0 0" /></a> The most widely-known project that members of the Jilion team (Rémy and I) have worked on is "Guard":https://github.com/guard/guard, a popular command line tool to easily trigger and handle events on file system changes. We use it to automate various aspects of almost every project we work on.

The concept behind Guard can be traced back to another project called "RSpactor":https://github.com/rubyphunk/rspactor, which would automatically re-run your "specs":https://github.com/rspec/rspec and "Cucumber":http://cukes.info/ features whenever one of your application files changed. Two years ago RSpactor developer "Rubyphunk":https://github.com/rubyphunk passed the duties of actively maintaining the project to me. The first thing I wanted to do was add support for the great "LiveReload":https://github.com/mockko/livereload project to automatically refresh my browser when editing views files.

I realized that if I were to continue adding support for different projects (RSpec, Cucumber, LiveReload, etc) then RSpactor wouldn't scale well, and I didn't want it to become bloated or unnecessarily complex. So, I created Guard to succeed it. On its own Guard does nothing, but it provides a framework to easily build plugins that can automate almost any process in your projects.

The community response to Guard has been outstanding; so far the Guard gem has been downloaded "500,000+":https://rubygems.org/gems/guard times compared to RSpactor’s "9,000+":https://rubygems.org/gems/rspactor downloads!

At present, "120+ Guard plugins":https://rubygems.org/search?query=guard- have been created to automate all kinds of processes. Here’s a few examples:

* "guard-coffeescript":https://github.com/guard/guard-coffeescript automatically compiles your CoffeeScript files when they are changed.
* "guard-jasmine":https://github.com/guard/guard-jasmine automatically runs your JavaScript specs.
* "guard-compass":https://github.com/guard/guard-compass automatically rebuilds SCSS/Sass files.
* "guard-phpunit":https://github.com/guard/guard-phpunit automatically runs unit-tests written with the PHPUnit testing framework.
* "guard-play":https://github.com/crazycode/guard-play automatically runs your unit-tests written with the Play framework (Scala & Java).

It's great to see a Ruby tool being used by the communities of other development languages like PHP, Scala & Java.

h4. How we use Guard

Below is an example of how we're using Guard at Jilion on our my.sublimevideo.net Rails app (which powers SublimeVideo’s management backend for our users).

First we add the guards we need to our "Gemfile":http://gembundler.com/:

<script src="https://gist.github.com/2584684.js?file=Gemfile"></script>

_Note: We're using the "tools" group to avoid loading these gems in Rails’s development mode._

Next, we use the following method to generate our default Guardfile:

@guard init [GUARD NAME]@

Once edited it looks like that:

<script src="https://gist.github.com/2584684.js?file=Guardfile"></script>

_Note: We’ve divided our Guards into two groups (frontend/backend). So for example, Octave (our designer) doesn’t ever need to worry about backend code when he uses Guard. We're using "rack-livereload":https://github.com/johnbintz/rack-livereload instead of the browser plugin._

Check out the "Guard REAMDE":https://github.com/guard/guard#guardfile-dsl to find more info about the Guardfile syntax.

To launch all Guards, we simply run:

@bundle exec guard@

Or, when we need to launch only a specific group:

@bundle exec guard -g frontend@

As you can see, Guard is easy to use and can save you tons of time on repetitive tasks. Just think: how many times have you restarted your Rails app or reloaded your browser manually? It all adds up!

h4. Jilion & Open-Source

Jilion will continue to support the development of Guard and hope it continues to be helpful to all kinds of developers. I'd like to thank the other Guard core team: "Maher Sallam":https://github.com/Maher4Ever, "Michael Kessler":https://github.com/netzpirat and "Rémy Coutable":https://github.com/rymai, Octave for his awesome Guard icon,  Guard "contributors":https://github.com/guard/guard/contributors and authors. You guys are all awesome and without you Guard wouldn't be what it is today.

Jilion also supports a few smaller open-source projects that some of you may find useful, visit our "Github page":https://github.com/jilion to learn more.

We hope this overview has been helpful and that some of you will be able to benefit by integrating Guard into your development workflows. If you’re interested in creating your own Guard plugin you can find out more inside the "Guard README":https://github.com/guard/guard#create-a-guard - it’s really easy! If you do, please don’t hesitate to share it with us and the community, we’re always excited to see how others can build on our open-source projects.
